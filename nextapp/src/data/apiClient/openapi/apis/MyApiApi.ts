/* tslint:disable */
/* eslint-disable */
/**
 * MyApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WeatherAnalysisDto,
} from '../models/index';
import {
    WeatherAnalysisDtoFromJSON,
    WeatherAnalysisDtoToJSON,
} from '../models/index';

/**
 * 
 */
export class MyApiApi extends runtime.BaseAPI {

    /**
     */
    async analyzeWeatherRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/weatherforecast/analyze`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async analyzeWeather(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyzeWeatherRaw(initOverrides);
    }

    /**
     * Get latest weather analysis
     */
    async getLatestWeatherAnalysisRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WeatherAnalysisDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/weatheranalysis/latest`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WeatherAnalysisDtoFromJSON(jsonValue));
    }

    /**
     * Get latest weather analysis
     */
    async getLatestWeatherAnalysis(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WeatherAnalysisDto> {
        const response = await this.getLatestWeatherAnalysisRaw(initOverrides);
        return await response.value();
    }

}
